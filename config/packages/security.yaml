security:
    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # üîê Auth JSON pour obtenir un token JWT
        login:
            pattern: ^/api/login$
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # üîê Protections JWT pour toutes les routes /api (sauf /api/login)
        api:
            pattern: ^/api
            stateless: true
            jwt: ~

        # üîì Auth formulaire existante (site Twig)
        main:
            pattern: ^/
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                username_parameter: email
                password_parameter: password
                enable_csrf: true
                csrf_parameter: _csrf_token
                csrf_token_id: authenticate
            logout:
                path: app_logout
                target: app_login
            remember_me:
                secret: "%kernel.secret%"
                lifetime: 604800
                path: /

    access_control:
        # Autoriser l'acc√®s public au point d'obtention du token
        - { path: ^/api/login$, roles: PUBLIC_ACCESS }
        # Tout le reste de /api n√©cessite un JWT valide
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        # Exemple si tu veux r√©server /admin/* :
        # - { path: ^/admin, roles: ROLE_ADMIN }
